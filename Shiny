library(DT)
library(shiny)
library(dplyr)
library(rvest)
library(stringi)
library(plotly)
#------------------------------------------------------------
#require( create.data() )

comparisonPlot <- function(x,AAA,BBB){  
  
  #    AAA and BBB will be of form input$VAR, which will be a read in textInput() from ui
  
  #    AAA and BBB must be character strings. the input syntax must acheive this
  
  AA <- create.data(AAA)
  
  A<-AA[[1]]
  
  BB <- create.data(BBB)
  
  B<-BB[[1]]
  
  
  
  y<-BB[[2]][x+1]
  
  
  
  z<-as.character(A[y,])
  
  z1<-as.character(B[y,])
  
  
  
  ###  see if all the numbers in each of the two rows are all scaled by the same values
  
  #    this will be used in the conditional below 
  
  #    this would be if values ended in B or M (to denote millions or billions of dollars) for example
  
  options(digits=5)
  
  yes<-as.character(c(substr(z,nchar(z),nchar(z))))
  
  yesyes<-as.character(c(substr(z1,nchar(z1),nchar(z1))))
  
  
  
  if(unique(yes)=='-' & unique(yesyes)=='-'){
    
    stop('Neither of the companies prompted have information for this variable on their Balance Sheets')
    
  }
  
  
  
  ###  here we are going to create the data that we will graph such that we will: 
  
  #    not only will we cut down the data sets to the part the user specified
  
  #    we will get rid of the characters (M,B,%) at the end of each entry
  
  #    and we will put the numbers in the same dimension as needed (all into millions or billions, etc) 
  
  if(length(unique(yes))==1 & length(unique(yesyes))==1){
    
    ###  if each variable set are all in the same denomination (such as millions) within and between each data set
    
    key<-substr(substr(z,nchar(z),nchar(z)),1,1)[1]  
    
    #    this line is hard coded for one year entery only but this is logical
    
    #    if a row contains any % then each of the rows (variables) in both sets MUST be all %
    
    if(key=="%"){
      
      ###  if everything is a percentage
      
      ###  make everything (if all percentages) a numeric input type     
      
      legend<- sprintf("All values of '%s' are percentages < 100", y)
      
      temp1 <- gsub("([MB)])","",A[y,])
      
      temp1 <- as.numeric(gsub("([(])","-",temp1))
      
      temp2 <- gsub("([MB)])","",B[y,])
      
      temp2 <- as.numeric(gsub("([(])","-",temp2))
      
    }else{
      
      ###  if everything is the same scaled value (such as billions)
      
      legend<- sprintf("All values of '%s' are in %sillions of US dollars", y, key)
      
      temp1 <- gsub("([MB)])","",A[y,])
      
      temp1 <- as.numeric(gsub("([(])","-",temp1))
      
      temp2 <- gsub("([MB)])","",B[y,])
      
      temp2 <- as.numeric(gsub("([(])","-",temp2))
      
    }
    
  }else if(!(isTRUE(as.character(unique(yes)) != '-'))|(!isTRUE(as.character(unique(yesyes)) != '-' ))){
    
    ###  if either data set contains a portion of entries that have no value (entered as "-")
    
    
    
    #    ultimately, if either of these data sets' vectors have a a year some blank cells, we do the following:
    
    #    an example of this would be a company whose IPO was after 2013, such as Snapchat
    
    #    we convert all existing entries to millions because this is convinient and reasonable 
    
    legend<- sprintf("All values of '%s' are in Millions of US dollars", y)
    
    i=1
    
    for(i in c(1:length(nchar(z)))){
      
      #    this range argument is hard coded for both z and z1, this is obviously reasonable 
      
      if(substr(z,nchar(z),nchar(z))[[i]]=="B"){
        
        z[i]<- gsub("([B])","",z[i])
        
        z[i]<-as.numeric(z[i])*1000
        
      }else if(substr(z,nchar(z),nchar(z))[[i]]=="K"){
        
        z[i]<- gsub("([K])","",z[i])
        
        z[i]<-as.numeric(z[i])/1000
        
      }else if(substr(z,nchar(z),nchar(z))[[i]]=="-"){
        
        z[i]<- gsub("([-])","0",z[i])
        
        z[i]<-as.numeric(z[i])
        
      }else if(substr(z,nchar(z),nchar(z))[[i]]=="M"){
        
        z[i]<- gsub("([M])","",z[i])
        
        z[i]<-as.numeric(z[i])
        
      }else{
        
        #
        
      }
      
      if(substr(z1,nchar(z1),nchar(z1))[[i]]=="B"){
        
        z1[i]<- gsub("([B])","",z1[i])
        
        z1[i]<-as.numeric(z1[i])*1000
        
      }else if(substr(z1,nchar(z1),nchar(z1))[[i]]=="K"){
        
        z1[i]<- gsub("([K])","",z1[i])
        
        z1[i]<-as.numeric(z1[i])/1000
        
      }else if(substr(z1,nchar(z1),nchar(z1))[[i]]=="M"){
        
        z1[i]<- gsub("([M])","",z1[i])
        
        z1[i]<-as.numeric(z1[i])
        
      }else if(substr(z1,nchar(z1),nchar(z1))[[i]]=="-"){
        
        z1[i]<- gsub("([-])","0",z1[i])
        
        z1[i]<-as.numeric(z1[i])
        
      }
      
    }
    
    temp1<-z
    
    temp2<-z1
    
  }else{
    
    #    else, the entries as a collective must vary by some multiple of thousands of dollars
    
    #    it is reasonable to then put everything as millions. this is what we do:
    
    legend<- sprintf("All values of '%s' are in Millions of US dollars", y)
    
    i=1
    
    for(i in c(1:length(nchar(z)))){
      
      if(substr(z,nchar(z),nchar(z))[[i]]=="B"){
        
        z[i]<- gsub("([B])","",z[i])
        
        z[i]<-as.numeric(z[i])*1000
        
      }else if(substr(z,nchar(z),nchar(z))[[i]]=="K"){
        
        z[i]<- gsub("([K])","",z[i])
        
        z[i]<-as.numeric(z[i])/1000
        
      }else{
        
  #
      }
      
      if(substr(z1,nchar(z1),nchar(z1))[[i]]=="B"){
        
        z1[i]<- gsub("([B])","",z1[i])
        
        z1[i]<-as.numeric(z1[i])*1000
        
      }else if(substr(z1,nchar(z1),nchar(z1))[[i]]=="K"){
        
        z1[i]<- gsub("([K])","",z1[i])
        
        z1[i]<-as.numeric(z1[i])/1000
      }
    }
    temp1<-z
    temp2<-z1
  }
  temp1<-as.numeric(temp1)
  temp2<-as.numeric(temp2)
  #now the function will graph the variable that the user prompted for
  data<-data.frame(matrix(temp1,temp2, ncol = 2, nrow=5))
  colnames(data)<-c(AAA,BBB)
  years<-c("2013", "2014", "2015", "2016", "2017")
  rownames(data)<-years
  #plot!
  plot_ly(data, x=~c(2013:2017),y=~y) %>%
    add_trace(y=~temp1, x=~years, name=AAA, type='scatter', mode='lines') %>%
    add_trace(y=~temp2, x=~years, name=BBB,  type='scatter', mode='lines') %>%
    layout(title = legend,
           scene = list(
             yaxis = list(title = y)))
  
}

#------------------------------------------------------------
#require rvest and dplyr

library("dplyr")

library("rvest")

create.data <- function(char){
  #import data
  a<-'https://www.marketwatch.com/investing/stock/'
  b<-'/financials/balance-sheet'
  html <- paste(a,char,b,sep='')
  year17 <- html(html) %>%
    html_nodes(xpath='//tr//*[(((count(preceding-sibling::*) + 1) = 6) and parent::*)]') %>%
    html_text()
  year16 <- html(html) %>%
    html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "valueCell", " " )) and (((count(preceding-sibling::*) + 1) = 5) and parent::*)] | //th[(((count(preceding-sibling::*) + 1) = 5) and parent::*)]') %>%
    html_text()
  year15 <- html(html) %>%
    html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "valueCell", " " )) and (((count(preceding-sibling::*) + 1) = 4) and parent::*)] | //th[(((count(preceding-sibling::*) + 1) = 4) and parent::*)]') %>%
    html_text()
  year14 <- html(html) %>%
    html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "valueCell", " " )) and (((count(preceding-sibling::*) + 1) = 3) and parent::*)] | //th[(((count(preceding-sibling::*) + 1) = 3) and parent::*)]') %>%
    html_text()
  year13 <- html(html) %>%
    
    html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "valueCell", " " )) and (((count(preceding-sibling::*) + 1) = 2) and parent::*)] | //th[(((count(preceding-sibling::*) + 1) = 2) and parent::*)]') %>%
    
    html_text()
  
  variables <- html(html) %>%
    
    html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "rowTitle", " " ))]') %>%
    
    html_text()
  #create matrix
  
  mylist<-c(year13[-1],year14[-1],year15[-1],year16[-1],year17[-1])
  
  fiscal.years<-c(year13[1],year14[1],year15[1],year16[1],year17[1])
  visualizeData<-matrix(mylist, ncol = 5)
  rownames(visualizeData)<-variables[-1]
  colnames(visualizeData)<-fiscal.years
 
#create return
  returnList <- list(visualizeData, variables)
  return(returnList)
}


#-----------------------------------------------
temp = create.data('wmt')
hello= temp[[3]]
hello2 = hello[2:length(hello)]

# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com
#

library(DT)
library(shiny)
library(dplyr)
library(rvest)

# Define UI for application that draws a histogram

ui <- fluidPage(
 
  # Application title
  
  titlePanel("Group 3 Project"),
  # Sidebar with a slider input for number of bins
  
  sidebarLayout(
    sidebarPanel(
      
      h5('please only write the tickers of the companies'),
      textInput('comp1', 'first company', value = "wmt", width = NULL, placeholder = NULL),
      textInput('comp2', 'second company', value = "aapl", width = NULL, placeholder = NULL),
      selectInput("property", "what would you like to compare:", hello2),
      actionButton("Button", "compare!", icon = icon("line-chart"))
    ),
    
    # Show a plot of the generated distribution
    
    mainPanel(
      tabsetPanel(
        tabPanel("Balance Sheet", dataTableOutput('table1')),
        tabPanel("Balance Sheet 2",dataTableOutput('table2')),
        tabPanel("Comparing", plotOutput('comparison2'))
        
      )
     )
  )
)
# Define server logic required to draw a histogram

server <- function(input, output) {
 
  aa <- eventReactive(input$Button, {
    create.data(char = input$comp1)[[2]]
  })
  bb <- eventReactive(input$Button, {
    create.data(char = input$comp2)[[2]]
  })
  output$comparison <- eventReactive(input$Button, {
   comparisonPlot(x = (grep(input$property, rownames(aa))-1), AAA = input$comp1, BBB = input$comp2)
    
    
  })
  output$comparison2 <- renderPlot({
    comparisonPlot(x = (grep(input$property, rownames(aa))-1), AAA = input$comp1, BBB = input$comp2)})
    
    
  output$table1 <- DT::renderDataTable({
    datatable( aa())
  })
  output$table2 <- DT::renderDataTable({
    datatable( bb(), rownames = TRUE )
  })

}


# Run the application

shinyApp(ui = ui, server = server)
